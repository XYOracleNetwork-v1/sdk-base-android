package network.xyo.base

import android.util.Log

/* We have everyone of these functions returning 'this' to allow for chaining */

open class XYLogging(private val source: String) {
    fun error(message: String, reThrow: Boolean): XYLogging {
        Log.e(info.sourceNameFromAny(source), message)
        val stackTrace = Thread.currentThread().stackTrace
        if (!stackTrace.isNullOrEmpty()) {
            Log.e(info.sourceNameFromAny(source), stackTrace.contentDeepToString().replace(", ", ",\r\n"))
        }
        if (reThrow) {
            throw RuntimeException()
        }
        return this
    }

    //Any Handled Exceptions
    fun error(ex: Throwable): XYLogging {
        error(ex, false)
        return this
    }

    fun error(ex: Throwable, reThrow: Boolean): XYLogging {
        Log.e(info.sourceNameFromAny(source), info.classNameFromObject(ex))
        val stackTrace = ex.stackTrace
        if (!stackTrace.isNullOrEmpty()) {
            Log.e(info.sourceNameFromAny(source), stackTrace.contentDeepToString().replace(", ", ",\r\n"))
        }

        if (info.hasDebugger) {
            if (reThrow) {
                throw RuntimeException(ex)
            }
        }
        return this
    }

    fun error(message: String): XYLogging {
        Log.e(info.sourceNameFromAny(source), "$message:${info.currentThreadName}")
        return this
    }

    //Normal information used for debugging.  Items should be less noisy than Extreme items
    fun info(function: String, message: String): XYLogging {
        Log.i(info.sourceNameFromAny(source), "$source:$function:$message [${info.currentThreadName}]")
        return this
    }

    fun info(message: String): XYLogging {
        Log.i(info.sourceNameFromAny(source), "$message [${info.currentThreadName}]")
        return this
    }

    //Actions are events that are generated by the user, like pushing a button
    fun action(action: String): XYLogging {
        Log.i(info.sourceNameFromAny(source), action)
        return this
    }

    //Status are Large Scale Events, Such As Startup, or Shutdown,
    //that may or may not be a result of a user action
    fun status(status: String): XYLogging {
        Log.i(info.sourceNameFromAny(source), "App Status: $status")
        return this
    }

    companion object {
        val info = XYInfo()
    }
}